// Control.cpp: implementation of the CWControl class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"

////////////////////////////////////////////////////////////////////////////////
/// Constructor / Destructor
////////////////////////////////////////////////////////////////////////////////
CWControl::CWControl()
{
	::InitCommonControls();

	this->m_hWnd			= NULL;
	this->m_hParent			= NULL;
	this->m_hInstance		= GetModuleHandle(NULL);
	this->m_nX				= 0;
	this->m_nY				= 0;
	this->m_nWidth			= 150;
	this->m_nHeight			= 100;
	this->m_nID				= 0;
	this->m_dwStyle			= WS_CHILD | WS_VISIBLE;
	this->m_dwExStyle		= WS_EX_WINDOWEDGE;
	this->m_strClassName	= "";
	this->m_strTitle		= "CustomControl";
	this->m_lpTag			= NULL;
}

CWControl::~CWControl()
{
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Create(HWND hWnd)
{
	char lpClassName[256];
	::GetClassName(hWnd, lpClassName, 256);
	if (strcmp(this->m_strClassName, lpClassName) == 0)
	{
		this->m_hWnd = hWnd;
		this->m_hParent = ::GetParent(this->m_hWnd);
		this->m_nID = ::GetWindowLong(this->m_hWnd, GWL_ID);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Create(HWND parent, int id)
{
	this->m_hParent			= parent;
	this->m_nID				= id;

	InitWindowClass();

	this->m_hWnd = ::CreateWindowEx(	this->m_dwExStyle,
										this->m_strClassName, 
										this->m_strTitle,
										this->m_dwStyle,
										this->m_nX,
										this->m_nY,
										this->m_nWidth,
										this->m_nHeight,
										this->m_hParent,
								(HMENU)	this->m_nID,
										this->m_hInstance,
										this);

	::SendMessage(this->m_hWnd, WM_SETFONT, (WPARAM)GetStockObject(ANSI_VAR_FONT), (LPARAM)0);

	::ShowWindow(this->m_hWnd, SW_SHOW);
	::UpdateWindow(this->m_hWnd);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Create(CWControl* parent, int id)
{
	Create(parent->GetHandle(), id);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::ReCreate(HWND newParent)
{
	DestroyWindow(this->m_hWnd);
	Create(newParent, this->m_nID);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Resize(int x, int y, int width, int height)
{
	this->m_nX = x;
	this->m_nY = y;
	this->m_nWidth = width;
	this->m_nHeight = height;

	::MoveWindow(this->m_hWnd, this->m_nX, this->m_nY, this->m_nWidth, this->m_nHeight, TRUE);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Refresh()
{
	if (this->m_hWnd)
	{
		::UpdateWindow(this->m_hWnd);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Kill()
{
	if (this->m_hWnd)
	{
		::DestroyWindow(this->m_hWnd);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::Focus()
{
	if (this->m_hWnd)
	{
		::SetFocus(this->m_hWnd);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
HWND CWControl::GetHandle()
{
	return this->m_hWnd;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetParent(HWND hWnd)
{
	this->m_hParent = hWnd;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
HFONT CWControl::GetFont()
{
	if (this->m_hWnd)
	{
		this->m_hFont = (HFONT)::SendMessage(this->m_hWnd, WM_GETFONT, 0, 0);
	}
	return this->m_hFont;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetFont(HFONT font)
{
	this->m_hFont = font;

	if (this->m_hWnd)
	{
		::SendMessage(this->m_hWnd, WM_SETFONT, (WPARAM)font, (LPARAM)TRUE);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
char* CWControl::GetTitle()
{
	return (LPTSTR)this->m_strTitle;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetTitle(char* title)
{
	this->m_strTitle = title;

	if (this->m_hWnd)
	{
		::SendMessage(this->m_hWnd, WM_SETTEXT, 0, (LPARAM)title);
	}

}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
DWORD CWControl::GetStyle()
{
	return this->m_dwStyle;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetStyle(DWORD style)
{
	this->m_dwStyle = this->m_dwStyle | style;

	if (this->m_hWnd)
	{
		::SetWindowLong(this->m_hWnd, GWL_STYLE, this->m_dwStyle);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
DWORD CWControl::GetExStyle()
{
	return this->m_dwExStyle;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetExStyle(DWORD exstyle)
{
	this->m_dwExStyle = exstyle;

	if (this->m_hWnd)
	{
		::SetWindowLong(this->m_hWnd, GWL_EXSTYLE, this->m_dwExStyle);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
LPVOID CWControl::GetTag()
{
	return this->m_lpTag;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetTag(LPVOID tag)
{
	this->m_lpTag = tag;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetRect(RECT* rc)
{
	this->m_nX = rc->left;
	this->m_nY = rc->top;
	this->m_nWidth = rc->right - rc->left;
	this->m_nHeight = rc->bottom - rc->top;

	if (this->m_hWnd)
	{
		Resize(this->m_nX, this->m_nY, this->m_nWidth, this->m_nHeight);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::GetRect(RECT* rc)
{
	if (this->m_hWnd)
	{
		::GetWindowRect(this->m_hWnd, rc);
	}
	else
	{
		rc->left = this->m_nX;
		rc->right = this->m_nWidth - this->m_nX;
		rc->top = this->m_nY;
		rc->bottom = this->m_nHeight - this->m_nY;
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
bool CWControl::IsEnabled()
{
	return ::IsWindowEnabled(this->m_hWnd) == TRUE;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetEnable(bool enabled)
{
	::EnableWindow(this->m_hWnd, enabled);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
bool CWControl::IsVisible()
{
	return ::IsWindowVisible(this->m_hWnd) == TRUE;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetVisible(bool visible)
{
	this->m_bVisible = visible;
	if (visible)
	{
		::ShowWindow(this->m_hWnd, SW_SHOW);
	}
	else
	{
		::ShowWindow(this->m_hWnd, SW_HIDE);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWControl::SetID(int id)
{
	this->m_nID = id;

	if (this->m_hWnd)
	{
		::SetWindowLong(this->m_hWnd, GWL_ID, (LPARAM)this->m_nID);
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
int CWControl::GetID()
{
	return this->m_nID;
}