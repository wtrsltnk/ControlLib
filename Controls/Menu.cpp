// Menu.cpp: implementation of the CWMenu class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CWMenu* CWMenu::FromResource(UINT id)
{
	CWMenu* menu = new CWMenu();

	menu->m_hMenu = LoadMenu(GetModuleHandle(0), MAKEINTRESOURCE(id));

	return menu;
}

CWMenu* CWMenu::FromSystemMenu(HWND hWnd)
{
	CWMenu* menu = new CWMenu();

	menu->m_hMenu = GetSystemMenu(hWnd, FALSE);

	return menu;
}

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CWMenu::CWMenu()
{
	this->m_hMenu = CreateMenu();

	strcpy(this->m_strName, "Menu");
}

CWMenu::CWMenu(char* name)
{
	this->m_hMenu = CreateMenu();

	strcpy(this->m_strName, name);
}

CWMenu::~CWMenu()
{
	if (this->m_hMenu)
	{
		DestroyMenu(this->m_hMenu);
		this->m_hMenu = NULL;
	}
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
HMENU CWMenu::Handle()
{
	return this->m_hMenu;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::AddItem(char* item, UINT id)
{
	AppendMenu(this->m_hMenu, MF_STRING, id, item);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::AddSubMenu(CWMenu* submenu)
{
	AppendMenu(this->m_hMenu, MF_POPUP, (UINT)submenu->Handle(), submenu->m_strName);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::AddSeperator()
{
	AppendMenu(this->m_hMenu, MF_SEPARATOR, 0, 0);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::InsertItem(char* item, UINT id, int pos)
{
	InsertMenu(this->m_hMenu, pos, MF_STRING | MF_BYPOSITION, id, item);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::InsertSubMenu(CWMenu* submenu, int pos)
{
	InsertMenu(this->m_hMenu, pos, MF_POPUP | MF_BYPOSITION, (UINT)submenu->Handle(), submenu->m_strName);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::InsertSeperator(int pos)
{
	InsertMenu(this->m_hMenu, pos, MF_SEPARATOR | MF_BYPOSITION, 0, 0);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::CheckItem(UINT id, bool check)
{
	UINT uCheck;

	if (check)
		uCheck = MF_CHECKED;
	else
		uCheck = MF_UNCHECKED;

	CheckMenuItem(this->m_hMenu, id, MF_BYCOMMAND | uCheck);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
bool CWMenu::IsChecked(UINT id)
{
	UINT state = GetMenuState(this->m_hMenu, id, MF_BYCOMMAND);

	if (state & MF_CHECKED)
		return true;

	return false;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::CheckGroupItem(UINT first, UINT last, UINT id)
{
	CheckMenuRadioItem(this->m_hMenu, first, last, id, MF_BYCOMMAND);
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
int CWMenu::IsGroupChecked(UINT first, UINT last)
{
	for (int i = first; i < last; i++)
	{
		UINT state = GetMenuState(this->m_hMenu, i, MF_BYCOMMAND);

		if ((state & MF_CHECKED) && (state & MFT_RADIOCHECK))
			return i;
	}

	return -1;
}

////////////////////////////////////////////////////////////////////////////////
/// Purpose : 
/// Input   : 
/// Output  : 
////////////////////////////////////////////////////////////////////////////////
void CWMenu::EnableItem(UINT id, bool enable)
{
	UINT uEnable;

	if (enable)
		uEnable = MF_ENABLED;
	else
		uEnable = MF_GRAYED | MF_DISABLED;

	EnableMenuItem(this->m_hMenu, id, MF_BYCOMMAND | uEnable);
}
